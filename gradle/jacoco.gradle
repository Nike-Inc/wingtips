// ========== JACOCO SETUP - View the combined/merged report at: [project_root]/build/reports/jacoco/jacocoRootReport/html/index.html.
//                           Individual reports for each submodule can be found at: [project_root]/[submodule]/build/reports/jacoco/test/html/index.html
allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = jacocoToolVersion
    }
}

ext {
    jacocoRootReportCoverageSummary = null
    jacocoCoverageSummaries = new LinkedHashMap<String, Double>()
}

// ========== SUBPROJECT JACOCO REPORTS

// Tell subprojects to generate jacoco reports.
subprojects {
    jacocoTestReport {
        additionalSourceDirs.from(files(sourceSets.main.allSource.srcDirs))
        sourceDirectories.from(files(sourceSets.main.allSource.srcDirs))
        classDirectories.from(files(sourceSets.main.output))
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
        afterEvaluate {
            //noinspection GroovyAssignabilityCheck
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, exclude: jacocoExclusions)
                    })
            )
        }

    }

    jacocoTestCoverageVerification { JacocoCoverageVerification v ->
        // The coverage rules are defined in the base build.gradle for convenience, but we can configure the
        //      exclusions here.
        afterEvaluate {
            //noinspection GroovyAssignabilityCheck
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, exclude: jacocoExclusions)
                    })
            )
        }
    }

    // Force jacoco reports and coverage verification to run after tests.
    test.finalizedBy(jacocoTestReport)
    test.finalizedBy(jacocoTestCoverageVerification)
}

// ========== COMBO JACOCO ROOT REPORT

// Define which subprojects we want to include in the combo root report.
def subprojectsToIncludeForJacocoComboReport(Set<Project> origSubprojects) {
    Set<Project> projectsToInclude = new HashSet<>()
    for (Project subproj : origSubprojects) {
        if (isSubprojectIncludedInJacocoReports(subproj)) {
            projectsToInclude.add(subproj)
        }
    }
    return projectsToInclude
}

// Define a task for generating the combo root report.
//noinspection GroovyAssignabilityCheck
task jacocoRootReport(type: JacocoReport) {
    def subprojectsToInclude = subprojectsToIncludeForJacocoComboReport(subprojects)

    // This can only run after all the subprojects' test and jacocoTestReport tasks.
    //      It feels like we should only have to specify jacocoTestReport since those run after tests anyway,
    //      but it doesn't appear to be honored that way when running the gradle build with the --parallel flag.
    mustRunAfter subprojectsToInclude*.test
    mustRunAfter subprojectsToInclude*.jacocoTestReport

    additionalSourceDirs.from(files(subprojectsToInclude.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from(files(subprojectsToInclude.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(subprojectsToInclude.sourceSets.main.output))
    executionData.from(files(subprojectsToInclude.jacocoTestReport.executionData))
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    afterEvaluate {
        //noinspection GroovyAssignabilityCheck
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: jacocoExclusions)
                })
        )
    }
    onlyIf = {
        true
    }
}

// Ensure that the combo root report runs after tests.
test.finalizedBy(jacocoRootReport)

// Configure coverage violation rules.
jacocoCoverageThresholdSetup()

// This dummy task forces all submodules' test tasks to run, even if one of them has failed tests.
//      NOTE: For the jacocoRootReport to work properly in the case a submodule has failed tests, the name
//      of this dummy task matters: it must have a name that alphabetically comes later than jacocoRootReport.
//noinspection GroovyAssignabilityCheck
task zForceAllSubprojectTestsToRunDummyTask {
    def subprojectsToInclude = subprojectsToIncludeForJacocoComboReport(subprojects)
    dependsOn = subprojectsToInclude.test
}

test.finalizedBy(zForceAllSubprojectTestsToRunDummyTask)

// ========== CONSOLE COVERAGE SUMMARY OUTPUT

// This method parses jacoco report XML to pull out the instruction coverage summary value and store it for later.
def parseJacocoSummaryInfo(JacocoReport task, boolean isRootReport) {
    File xmlFile = task.reports.xml.getOutputLocation().getAsFile().getOrNull()
    if (xmlFile == null || !xmlFile.exists()) {
        return
    }

    Node rootNode = new XmlParser(false, false).parseText(
            xmlFile.text.replaceAll("<!DOCTYPE[^>]*>", "")
    )
    Double instructionPctCovered = null
    rootNode.counter.each { counter ->
        try {
            double missed = Integer.valueOf(counter.@missed as String).toDouble()
            double covered = Integer.valueOf(counter.@covered as String).toDouble()
            String type = counter.@type as String
            if (type == "INSTRUCTION") {
                instructionPctCovered = covered / (missed + covered)
            }
        } catch (ignore) {
        }
    }

    if (isRootReport) {
        jacocoRootReportCoverageSummary = instructionPctCovered
    }
    else {
        jacocoCoverageSummaries.put(task.project.name, instructionPctCovered)
    }
}

// For subprojects included in the jacoco combo report, we want to report subproject coverage summaries on the console,
//      so tell the subproject's jacoco report tasks to parse summary info and put it somewhere we can access at the
//      end of the gradle build.
configure(subprojectsToIncludeForJacocoComboReport(subprojects)) {
    jacocoTestReport {
        doLast { JacocoReport jr ->
            parseJacocoSummaryInfo(jr, false)
        }
    }
}

// Do the same for the main project's combo root report.
jacocoRootReport {
    doLast { JacocoReport jr ->
        parseJacocoSummaryInfo(jr, true)
    }
}

// Output the overall coverage summary and summaries for all the submodules' coverage when the gradle build
//      completely finishes.
gradle.buildFinished { BuildResult buildResult ->
    println("\n=== COVERAGE SUMMARY ===")

    println("${rootProject.name}: " + getCoveragePercentageAsString(jacocoRootReportCoverageSummary))

    jacocoCoverageSummaries.forEach({ String projectName, Double value ->
        println("${projectName}: " + getCoveragePercentageAsString(value))
    })

    println("")
}

static String getCoveragePercentageAsString(Double pct) {
    if (pct == null) {
        return "??.?%"
    }

    return (pct * 100.0d).trunc(2) + "%"
}
