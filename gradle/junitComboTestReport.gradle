import groovy.time.TimeCategory

// ========== COMBO TEST REPORT - View the combined/merged report at: [project_root]/build/reports/tests/index.html
//noinspection GroovyAssignabilityCheck
task testReport(type: TestReport) {
    getDestinationDirectory().set(file("$buildDir/reports/tests"))
    // Include the results from the `test` task's output dir in all subprojects
    getTestResults().setFrom(subprojects*.test.binaryResultsDirectory)
}

// Aggregate test reports for all subprojects at the root project level
subprojects {
    test {
        reports.html.required = true
        reports.junitXml.required = true
        reports.junitXml.outputLocation.set(file("${rootProject.test.reports.junitXml.getOutputLocation().get()}/${project.name}"))
    }
    // Tell testReport to run after the tests run
    test.finalizedBy(testReport)
}

// ========== TEST SUMMARY CONSOLE OUTPUT
ext {
    submoduleTestSuccessSummaries = new ArrayList<>()
    submoduleTestFailureSummaries = new ArrayList<>()
    suiteToSkippedTestDetails = new LinkedHashMap<String, List<String>>()
    suiteToFailedTestDetails = new LinkedHashMap<String, List<String>>()
}

// Listen to the test executions (both individual and suite-level), and capture some info for later summary output.
subprojects {
    test {
        // For each test capture some extra info if the test was failed or skipped.
        afterTest { TestDescriptor desc, TestResult result ->

            String outermostParentName = findOutermostParent(desc).getId()
            String testName = "${desc.className} > ${desc.name}"

            if (result.resultType == TestResult.ResultType.FAILURE) {
                testName += " FAILED"
                List<String> failedDetailsList = suiteToFailedTestDetails.get(outermostParentName)
                if (failedDetailsList == null) {
                    failedDetailsList = new ArrayList<>()
                    suiteToFailedTestDetails.put(outermostParentName, failedDetailsList)
                }
                String failedDetails = testName
                if (result.getException() != null) {
                    failedDetails += "\n" + sanitizeStackTraceForSummary(result.getException(), desc.className, desc.name, "\t")
                }
                failedDetailsList.add(
                        failedDetails
                )
            }
            else if (result.resultType == TestResult.ResultType.SKIPPED) {
                testName += " SKIPPED"
                List<String> skippedDetailsList = suiteToSkippedTestDetails.get(outermostParentName)
                if (skippedDetailsList == null) {
                    skippedDetailsList = new ArrayList<>()
                    suiteToSkippedTestDetails.put(outermostParentName, skippedDetailsList)
                }
                skippedDetailsList.add(testName)
            }
        }

        // For each suite capture an overall summary block for the submodule's tests.
        afterSuite { TestDescriptor desc, TestResult result ->

            if (!desc.parent) { // Ignore individual tests - just do submodule summaries
                List<String> outputLinesRaw = new ArrayList<>([
                        "Test Results for ${desc.getId()}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                                " in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}",
                        "Report file: ${reports.html.entryPoint}"
                ])

                List<String> summaryListToUse = (result.resultType == TestResult.ResultType.SUCCESS)
                        ? submoduleTestSuccessSummaries
                        : submoduleTestFailureSummaries

                summaryListToUse.add(surroundWithAsciiBox(outputLinesRaw))
            }
        }

    }
}

// Output summaries for all the submodules' unit tests when the build finishes.
gradle.buildFinished {
    println("\n=== TESTING SUMMARY ===")
    println("Skipped Tests:")

    if (suiteToSkippedTestDetails.isEmpty()) {
        println("None")
    }
    else {
        suiteToSkippedTestDetails.forEach({ String descId, List<String> skippedTests ->
            List<String> outputLinesRaw = new ArrayList<>()
            outputLinesRaw.add("${descId}")
            //noinspection GroovyAssignabilityCheck
            outputLinesRaw.addAll(skippedTests.collect { "  " + it })
            println(surroundWithAsciiBox(outputLinesRaw))
        })
    }

    println("\nFailed Tests:")

    if (suiteToFailedTestDetails.isEmpty()) {
        println("None")
    }
    else {
        suiteToFailedTestDetails.forEach({ String descId, List<String> failedTests ->
            List<String> outputLinesRaw = new ArrayList<>()
            outputLinesRaw.add("${descId}")
            //noinspection GroovyAssignabilityCheck
            outputLinesRaw.addAll(failedTests.collect { [""] + it.readLines() }.flatten().collect { "  " + it.toString().replace("\t", "  ") })
            println(surroundWithAsciiBox(outputLinesRaw))
        })
    }

    println("\nIndividual Project Testing Summaries:")

    if (submoduleTestSuccessSummaries.isEmpty() && submoduleTestFailureSummaries.isEmpty()) {
        println("No test results found - were tests skipped?")
    }
    else {
        for (String submoduleSummaryOutput : submoduleTestSuccessSummaries) {
            println(submoduleSummaryOutput)
        }

        for (String submoduleSummaryOutput : submoduleTestFailureSummaries) {
            println(submoduleSummaryOutput)
        }
    }
}

static TestDescriptor findOutermostParent(TestDescriptor desc) {
    TestDescriptor result = desc
    while (result.parent != null) {
        result = result.parent
    }
    return result
}

static String sanitizeStackTraceForSummary(Throwable t, String failedTestClass, String failedTestName, String indent) {
    if (t == null) {
        return null
    }

    String result = indent + t.toString()
    StackTraceElement[] stackTrace = t.stackTrace
    boolean seenStopElement = false
    int elementsIncluded = 0
    for (int i = 0; i < stackTrace.length; i++) {
        if (!seenStopElement) {
            StackTraceElement ste = stackTrace[i]
            result += "\n${indent}\tat " + ste.toString()

            elementsIncluded++

            if (ste.className == failedTestClass && ste.methodName == failedTestName) {
                seenStopElement = true
            }
        }
    }

    if (elementsIncluded < stackTrace.length) {
        result += "\n${indent}\t..."
    }

    return result
}

static String surroundWithAsciiBox(List<String> outputLinesRaw) {
    int maxOutputLineLength = outputLinesRaw*.readLines().flatten().collect { it.length() }.max()
    //noinspection GroovyAssignabilityCheck
    List<String> outputLines = outputLinesRaw.collect { rawLine ->
        if (rawLine.length() < maxOutputLineLength) {
            rawLine + (' ' * (maxOutputLineLength - rawLine.length()))
        }
        else {
            rawLine
        }
    }

    def startItem = '|  ', endItem = '  |'
    def repeatLength = startItem.length() + maxOutputLineLength + endItem.length()
    def fullOutput = ('-' * repeatLength)
    outputLines.forEach({
        fullOutput += '\n' + startItem + it + endItem
    })
    fullOutput += '\n' + ('-' * repeatLength)
    return fullOutput
}
